
Timer_Task2_ic21b128_Buchmayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003178  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800334c  0800334c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003354  08003354  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003358  08003358  00013358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800335c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003368  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003368  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010359  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f03  00000000  00000000  00030395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020225  00000000  00000000  00033f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100c1  00000000  00000000  00054145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c76b1  00000000  00000000  00064206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b8b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d88  00000000  00000000  0012b908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080032ec 	.word	0x080032ec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080032ec 	.word	0x080032ec

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_tim_timeout_blocking>:
static void MX_USART2_UART_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */


void _tim_timeout_blocking(uint32_t dur){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	//doesnt work, please do more practical work in class, theory doesnt help if i dont know how to apply it
//	HAL_SuspendTick();
//	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);


	HAL_Delay(dur);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 fb5f 	bl	8000b9c <HAL_Delay>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <_tim_timeout_nonblocking_with_callback>:

void _tim_timeout_nonblocking_with_callback(uint32_t dur, void(*call_func)(void)){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	callback = call_func;
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <_tim_timeout_nonblocking_with_callback+0x2c>)
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	6013      	str	r3, [r2, #0]
	non_block_timeout = dur;
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <_tim_timeout_nonblocking_with_callback+0x30>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6013      	str	r3, [r2, #0]
	non_block_call = time;
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <_tim_timeout_nonblocking_with_callback+0x34>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <_tim_timeout_nonblocking_with_callback+0x38>)
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000104 	.word	0x20000104
 8000518:	20000100 	.word	0x20000100
 800051c:	200000f8 	.word	0x200000f8
 8000520:	200000fc 	.word	0x200000fc

08000524 <toggle_LED>:

void toggle_LED(){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	//task didnt specify how you are supposed to demonstrate/show the task, so i did what classmates did and toggled an LED
	//please be more specific with the tasks, i spend too much time actually trying to figure out what is required than actually working
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f000 fdec 	bl	800110c <HAL_GPIO_TogglePin>
	callback = NULL;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <toggle_LED+0x28>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
	non_block_timeout = 0;
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <toggle_LED+0x2c>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
	non_block_call = 0;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <toggle_LED+0x30>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000104 	.word	0x20000104
 8000550:	20000100 	.word	0x20000100
 8000554:	200000fc 	.word	0x200000fc

08000558 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	time += htim->Instance->ARR + 1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4413      	add	r3, r2
 800056e:	4a0b      	ldr	r2, [pc, #44]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000570:	6013      	str	r3, [r2, #0]

	if(callback != NULL && time >= non_block_call + non_block_timeout){
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00b      	beq.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x3a>
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	441a      	add	r2, r3
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	429a      	cmp	r2, r3
 800058a:	d802      	bhi.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x3a>
		callback();
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4798      	blx	r3
	}
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000f8 	.word	0x200000f8
 80005a0:	20000104 	.word	0x20000104
 80005a4:	200000fc 	.word	0x200000fc
 80005a8:	20000100 	.word	0x20000100

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fa7f 	bl	8000ab2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f818 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8f0 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f8be 	bl	800073c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80005c0:	f000 f874 	bl	80006ac <MX_TIM6_Init>

    /* USER CODE BEGIN 3 */

	  //task unclear, i have little to no idea what im doing and everything was done using google, please help
	  //please be more specific with the tasks, i spend too much time actually trying to figure out what is required than actually working
	  _tim_timeout_blocking(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f7ff ff82 	bl	80004d0 <_tim_timeout_blocking>
//	  HAL_ResumeTick(); //didnt work
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80005cc:	2108      	movs	r1, #8
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <main+0x34>)
 80005d0:	f000 fd9c 	bl	800110c <HAL_GPIO_TogglePin>
	  _tim_timeout_nonblocking_with_callback(200, toggle_LED);
 80005d4:	4903      	ldr	r1, [pc, #12]	; (80005e4 <main+0x38>)
 80005d6:	20c8      	movs	r0, #200	; 0xc8
 80005d8:	f7ff ff86 	bl	80004e8 <_tim_timeout_nonblocking_with_callback>
	  _tim_timeout_blocking(1000);
 80005dc:	e7f2      	b.n	80005c4 <main+0x18>
 80005de:	bf00      	nop
 80005e0:	48000400 	.word	0x48000400
 80005e4:	08000525 	.word	0x08000525

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	; 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fe70 	bl	80032dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060e:	f000 fdb5 	bl	800117c <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f000 f922 	bl	8000860 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f000 fd90 	bl	8001140 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <SystemClock_Config+0xc0>)
 8000622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <SystemClock_Config+0xc0>)
 8000628:	f023 0318 	bic.w	r3, r3, #24
 800062c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000630:	2314      	movs	r3, #20
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000640:	2360      	movs	r3, #96	; 0x60
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000648:	2301      	movs	r3, #1
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064c:	2301      	movs	r3, #1
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000650:	2310      	movs	r3, #16
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fddf 	bl	8001228 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000670:	f000 f8f6 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2303      	movs	r3, #3
 800067a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	2101      	movs	r1, #1
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f9df 	bl	8001a50 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000698:	f000 f8e2 	bl	8000860 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800069c:	f001 fdf2 	bl	8002284 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a0:	bf00      	nop
 80006a2:	3758      	adds	r7, #88	; 0x58
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_TIM6_Init+0x88>)
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_TIM6_Init+0x8c>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_TIM6_Init+0x88>)
 80006c4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80006c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_TIM6_Init+0x88>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_TIM6_Init+0x88>)
 80006d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_TIM6_Init+0x88>)
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006de:	4815      	ldr	r0, [pc, #84]	; (8000734 <MX_TIM6_Init+0x88>)
 80006e0:	f001 fed2 	bl	8002488 <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80006ea:	f000 f8b9 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <MX_TIM6_Init+0x88>)
 80006fc:	f002 f91c 	bl	8002938 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000706:	f000 f8ab 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800070a:	480a      	ldr	r0, [pc, #40]	; (8000734 <MX_TIM6_Init+0x88>)
 800070c:	f001 ff14 	bl	8002538 <HAL_TIM_Base_Start_IT>
  htim6.Instance->ARR = 1000;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_TIM6_Init+0x88>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
  htim6.Instance->EGR |= TIM_EGR_UG;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_TIM6_Init+0x88>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	695a      	ldr	r2, [r3, #20]
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <MX_TIM6_Init+0x88>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0201 	orr.w	r2, r2, #1
 8000728:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM6_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000028 	.word	0x20000028
 8000738:	40001000 	.word	0x40001000

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000780:	f002 f95e 	bl	8002a40 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f869 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000074 	.word	0x20000074
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a22      	ldr	r2, [pc, #136]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_GPIO_Init+0xbc>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f000 fc6a 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	4813      	ldr	r0, [pc, #76]	; (800085c <MX_GPIO_Init+0xc0>)
 800080e:	f000 fc65 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 faeb 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0xc0>)
 800084a:	f000 fadd 	bl	8000e08 <HAL_GPIO_Init>

}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_MspInit+0x44>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6613      	str	r3, [r2, #96]	; 0x60
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x44>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6593      	str	r3, [r2, #88]	; 0x58
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d113      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2036      	movs	r0, #54	; 0x36
 80008e4:	f000 fa59 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008e8:	2036      	movs	r0, #54	; 0x36
 80008ea:	f000 fa72 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40001000 	.word	0x40001000
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09e      	sub	sp, #120	; 0x78
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	2254      	movs	r2, #84	; 0x54
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fcdb 	bl	80032dc <memset>
  if(huart->Instance==USART2)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a28      	ldr	r2, [pc, #160]	; (80009cc <HAL_UART_MspInit+0xcc>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d148      	bne.n	80009c2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000930:	2302      	movs	r3, #2
 8000932:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4618      	mov	r0, r3
 800093e:	f001 faab 	bl	8001e98 <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000948:	f7ff ff8a 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <HAL_UART_MspInit+0xd0>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000950:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <HAL_UART_MspInit+0xd0>)
 8000952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000956:	6593      	str	r3, [r2, #88]	; 0x58
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <HAL_UART_MspInit+0xd0>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <HAL_UART_MspInit+0xd0>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_UART_MspInit+0xd0>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_UART_MspInit+0xd0>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800097c:	2304      	movs	r3, #4
 800097e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098c:	2307      	movs	r3, #7
 800098e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 fa35 	bl	8000e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800099e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009b0:	2303      	movs	r3, #3
 80009b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009b8:	4619      	mov	r1, r3
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f000 fa23 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3778      	adds	r7, #120	; 0x78
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40021000 	.word	0x40021000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f89c 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM6_DAC_IRQHandler+0x10>)
 8000a2e:	f001 fdd7 	bl	80025e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000028 	.word	0x20000028

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff ffea 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f002 fc01 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a92:	f7ff fd8b 	bl	80005ac <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa4:	0800335c 	.word	0x0800335c
  ldr r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aac:	2000010c 	.word	0x2000010c

08000ab0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_IRQHandler>

08000ab2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f961 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f80e 	bl	8000ae4 <HAL_InitTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	e001      	b.n	8000ad8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad4:	f7ff feca 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_InitTick+0x6c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d023      	beq.n	8000b40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_InitTick+0x70>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_InitTick+0x6c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f96d 	bl	8000dee <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10f      	bne.n	8000b3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d809      	bhi.n	8000b34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f937 	bl	8000d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_InitTick+0x74>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e007      	b.n	8000b44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e004      	b.n	8000b44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e001      	b.n	8000b44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000108 	.word	0x20000108

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000108 	.word	0x20000108

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_Delay+0x44>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffde 	bl	8000b84 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff29 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff3e 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff31 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e148      	b.n	80010aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 813a 	beq.w	80010a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d005      	beq.n	8000e48 <HAL_GPIO_Init+0x40>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d130      	bne.n	8000eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	f003 0201 	and.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d017      	beq.n	8000ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d123      	bne.n	8000f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	6939      	ldr	r1, [r7, #16]
 8000f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0203 	and.w	r2, r3, #3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8094 	beq.w	80010a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7c:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_GPIO_Init+0x2c0>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f80:	4a51      	ldr	r2, [pc, #324]	; (80010c8 <HAL_GPIO_Init+0x2c0>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6613      	str	r3, [r2, #96]	; 0x60
 8000f88:	4b4f      	ldr	r3, [pc, #316]	; (80010c8 <HAL_GPIO_Init+0x2c0>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x2c4>)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fbe:	d00d      	beq.n	8000fdc <HAL_GPIO_Init+0x1d4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a43      	ldr	r2, [pc, #268]	; (80010d0 <HAL_GPIO_Init+0x2c8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x1d0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a42      	ldr	r2, [pc, #264]	; (80010d4 <HAL_GPIO_Init+0x2cc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_GPIO_Init+0x1cc>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e004      	b.n	8000fde <HAL_GPIO_Init+0x1d6>
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	e002      	b.n	8000fde <HAL_GPIO_Init+0x1d6>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_GPIO_Init+0x1d6>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	f002 0203 	and.w	r2, r2, #3
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fee:	4937      	ldr	r1, [pc, #220]	; (80010cc <HAL_GPIO_Init+0x2c4>)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001020:	4a2d      	ldr	r2, [pc, #180]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001074:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa22 f303 	lsr.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f47f aeaf 	bne.w	8000e18 <HAL_GPIO_Init+0x10>
  }
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010000 	.word	0x40010000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000800 	.word	0x48000800
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4013      	ands	r3, r2
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43d9      	mvns	r1, r3
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	400b      	ands	r3, r1
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40007000 	.word	0x40007000

08001160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_PWREx_GetVoltageRange+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40007000 	.word	0x40007000

0800117c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118a:	d130      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001198:	d038      	beq.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2232      	movs	r2, #50	; 0x32
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9b      	lsrs	r3, r3, #18
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c0:	e002      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d4:	d102      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f2      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e8:	d110      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e00f      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d007      	beq.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000
 8001220:	20000000 	.word	0x20000000
 8001224:	431bde83 	.word	0x431bde83

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f000 bc02 	b.w	8001a40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123c:	4b96      	ldr	r3, [pc, #600]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001246:	4b94      	ldr	r3, [pc, #592]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80e4 	beq.w	8001426 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d007      	beq.n	8001274 <HAL_RCC_OscConfig+0x4c>
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	f040 808b 	bne.w	8001382 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2b01      	cmp	r3, #1
 8001270:	f040 8087 	bne.w	8001382 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001274:	4b88      	ldr	r3, [pc, #544]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_OscConfig+0x64>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e3d9      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1a      	ldr	r2, [r3, #32]
 8001290:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_RCC_OscConfig+0x7e>
 800129c:	4b7e      	ldr	r3, [pc, #504]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a4:	e005      	b.n	80012b2 <HAL_RCC_OscConfig+0x8a>
 80012a6:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d223      	bcs.n	80012fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fd8c 	bl	8001dd8 <RCC_SetFlashLatencyFromMSIRange>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3ba      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a72      	ldr	r2, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b70      	ldr	r3, [pc, #448]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	496d      	ldr	r1, [pc, #436]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	4968      	ldr	r1, [pc, #416]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
 80012fc:	e025      	b.n	800134a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fe:	4b66      	ldr	r3, [pc, #408]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a65      	ldr	r2, [pc, #404]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b63      	ldr	r3, [pc, #396]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4960      	ldr	r1, [pc, #384]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131c:	4b5e      	ldr	r3, [pc, #376]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	495b      	ldr	r1, [pc, #364]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fd4c 	bl	8001dd8 <RCC_SetFlashLatencyFromMSIRange>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e37a      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800134a:	f000 fc81 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 800134e:	4602      	mov	r2, r0
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	4950      	ldr	r1, [pc, #320]	; (800149c <HAL_RCC_OscConfig+0x274>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	4a4e      	ldr	r2, [pc, #312]	; (80014a0 <HAL_RCC_OscConfig+0x278>)
 8001368:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800136a:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fbb8 	bl	8000ae4 <HAL_InitTick>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d052      	beq.n	8001424 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	e35e      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d032      	beq.n	80013f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800138a:	4b43      	ldr	r3, [pc, #268]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a42      	ldr	r2, [pc, #264]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001396:	f7ff fbf5 	bl	8000b84 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139e:	f7ff fbf1 	bl	8000b84 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e347      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a35      	ldr	r2, [pc, #212]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4930      	ldr	r1, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013da:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	492b      	ldr	r1, [pc, #172]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
 80013ee:	e01a      	b.n	8001426 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a28      	ldr	r2, [pc, #160]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fbc2 	bl	8000b84 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001404:	f7ff fbbe 	bl	8000b84 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e314      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1dc>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d073      	beq.n	800151a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x21c>
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	d10e      	bne.n	800145c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d10b      	bne.n	800145c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d063      	beq.n	8001518 <HAL_RCC_OscConfig+0x2f0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d15f      	bne.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2f1      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001464:	d106      	bne.n	8001474 <HAL_RCC_OscConfig+0x24c>
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e025      	b.n	80014c0 <HAL_RCC_OscConfig+0x298>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147c:	d114      	bne.n	80014a8 <HAL_RCC_OscConfig+0x280>
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a02      	ldr	r2, [pc, #8]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e013      	b.n	80014c0 <HAL_RCC_OscConfig+0x298>
 8001498:	40021000 	.word	0x40021000
 800149c:	08003304 	.word	0x08003304
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000004 	.word	0x20000004
 80014a8:	4ba0      	ldr	r3, [pc, #640]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a9f      	ldr	r2, [pc, #636]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b9d      	ldr	r3, [pc, #628]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a9c      	ldr	r2, [pc, #624]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d013      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb5c 	bl	8000b84 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb58 	bl	8000b84 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e2ae      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	4b92      	ldr	r3, [pc, #584]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2a8>
 80014ee:	e014      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb48 	bl	8000b84 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fb44 	bl	8000b84 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e29a      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	4b88      	ldr	r3, [pc, #544]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d0>
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d060      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x310>
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d119      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d116      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	4b7c      	ldr	r3, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x328>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e277      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b76      	ldr	r3, [pc, #472]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	4973      	ldr	r1, [pc, #460]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	e040      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d023      	beq.n	80015b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156e:	4b6f      	ldr	r3, [pc, #444]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a6e      	ldr	r2, [pc, #440]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fb03 	bl	8000b84 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff faff 	bl	8000b84 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e255      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001594:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b62      	ldr	r3, [pc, #392]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	495f      	ldr	r1, [pc, #380]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b5d      	ldr	r3, [pc, #372]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a5c      	ldr	r2, [pc, #368]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fadf 	bl	8000b84 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fadb 	bl	8000b84 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e231      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d03c      	beq.n	800166e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01c      	beq.n	8001636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fc:	4b4b      	ldr	r3, [pc, #300]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001602:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff faba 	bl	8000b84 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fab6 	bl	8000b84 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e20c      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x3ec>
 8001634:	e01b      	b.n	800166e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163c:	4a3b      	ldr	r2, [pc, #236]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fa9d 	bl	8000b84 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fa99 	bl	8000b84 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1ef      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ef      	bne.n	800164e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	; 0x58
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x508>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d118      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_RCC_OscConfig+0x508>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_RCC_OscConfig+0x508>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa60 	bl	8000b84 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7ff fa5c 	bl	8000b84 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1b2      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_RCC_OscConfig+0x508>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_RCC_OscConfig+0x4d8>
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fe:	e029      	b.n	8001754 <HAL_RCC_OscConfig+0x52c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d115      	bne.n	8001734 <HAL_RCC_OscConfig+0x50c>
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a03      	ldr	r2, [pc, #12]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x52c>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
 8001734:	4b9a      	ldr	r3, [pc, #616]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	4a99      	ldr	r2, [pc, #612]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001744:	4b96      	ldr	r3, [pc, #600]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	4a95      	ldr	r2, [pc, #596]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d016      	beq.n	800178a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa12 	bl	8000b84 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fa0e 	bl	8000b84 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e162      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ed      	beq.n	8001764 <HAL_RCC_OscConfig+0x53c>
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff f9fb 	bl	8000b84 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f9f7 	bl	8000b84 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e14b      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ed      	bne.n	8001792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b78      	ldr	r3, [pc, #480]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	4a77      	ldr	r2, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d03c      	beq.n	800184e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01c      	beq.n	8001816 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017dc:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 80017de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e2:	4a6f      	ldr	r2, [pc, #444]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f9ca 	bl	8000b84 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f4:	f7ff f9c6 	bl	8000b84 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e11c      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001806:	4b66      	ldr	r3, [pc, #408]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ef      	beq.n	80017f4 <HAL_RCC_OscConfig+0x5cc>
 8001814:	e01b      	b.n	800184e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001816:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181c:	4a60      	ldr	r2, [pc, #384]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff f9ad 	bl	8000b84 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182e:	f7ff f9a9 	bl	8000b84 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0ff      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001840:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ef      	bne.n	800182e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80f3 	beq.w	8001a3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	2b02      	cmp	r3, #2
 800185e:	f040 80c9 	bne.w	80019f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001862:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0203 	and.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	429a      	cmp	r2, r3
 8001874:	d12c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	3b01      	subs	r3, #1
 8001882:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d123      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d11b      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d113      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d109      	bne.n	80018d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d06b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d062      	beq.n	800199c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018d6:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0ac      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a2d      	ldr	r2, [pc, #180]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 80018ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018f2:	f7ff f947 	bl	8000b84 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f943 	bl	8000b84 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e099      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_RCC_OscConfig+0x77c>)
 800191e:	4013      	ands	r3, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001928:	3a01      	subs	r2, #1
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001932:	0212      	lsls	r2, r2, #8
 8001934:	4311      	orrs	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800193a:	0852      	lsrs	r2, r2, #1
 800193c:	3a01      	subs	r2, #1
 800193e:	0552      	lsls	r2, r2, #21
 8001940:	4311      	orrs	r1, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001946:	0852      	lsrs	r2, r2, #1
 8001948:	3a01      	subs	r2, #1
 800194a:	0652      	lsls	r2, r2, #25
 800194c:	4311      	orrs	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001952:	06d2      	lsls	r2, r2, #27
 8001954:	430a      	orrs	r2, r1
 8001956:	4912      	ldr	r1, [pc, #72]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001958:	4313      	orrs	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001974:	f7ff f906 	bl	8000b84 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f902 	bl	8000b84 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e058      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_RCC_OscConfig+0x778>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199a:	e050      	b.n	8001a3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e04f      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
 80019a0:	40021000 	.word	0x40021000
 80019a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d144      	bne.n	8001a3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019cc:	f7ff f8da 	bl	8000b84 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f8d6 	bl	8000b84 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e02c      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x7ac>
 80019f2:	e024      	b.n	8001a3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d01f      	beq.n	8001a3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 8001a00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff f8bd 	bl	8000b84 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff f8b9 	bl	8000b84 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e00f      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	4905      	ldr	r1, [pc, #20]	; (8001a48 <HAL_RCC_OscConfig+0x820>)
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_RCC_OscConfig+0x824>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
 8001a38:	e001      	b.n	8001a3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	feeefffc 	.word	0xfeeefffc

08001a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0e7      	b.n	8001c34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <HAL_RCC_ClockConfig+0x1ec>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d910      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b72      	ldr	r3, [pc, #456]	; (8001c3c <HAL_RCC_ClockConfig+0x1ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4970      	ldr	r1, [pc, #448]	; (8001c3c <HAL_RCC_ClockConfig+0x1ec>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b6e      	ldr	r3, [pc, #440]	; (8001c3c <HAL_RCC_ClockConfig+0x1ec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0cf      	b.n	8001c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d010      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d908      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b63      	ldr	r3, [pc, #396]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4960      	ldr	r1, [pc, #384]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d04c      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d121      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0a6      	b.n	8001c34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aee:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d115      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e09a      	b.n	8001c34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b06:	4b4e      	ldr	r3, [pc, #312]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e08e      	b.n	8001c34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e086      	b.n	8001c34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 0203 	bic.w	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4943      	ldr	r1, [pc, #268]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b38:	f7ff f824 	bl	8000b84 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7ff f820 	bl	8000b84 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e06e      	b.n	8001c34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 020c 	and.w	r2, r3, #12
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1eb      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d208      	bcs.n	8001b96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	492b      	ldr	r1, [pc, #172]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d210      	bcs.n	8001bc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 0207 	bic.w	r2, r3, #7
 8001bac:	4923      	ldr	r1, [pc, #140]	; (8001c3c <HAL_RCC_ClockConfig+0x1ec>)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e036      	b.n	8001c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d008      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	4918      	ldr	r1, [pc, #96]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4910      	ldr	r1, [pc, #64]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c04:	f000 f824 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	490b      	ldr	r1, [pc, #44]	; (8001c44 <HAL_RCC_ClockConfig+0x1f4>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1f8>)
 8001c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1fc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe ff5b 	bl	8000ae4 <HAL_InitTick>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c32:	7afb      	ldrb	r3, [r7, #11]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08003304 	.word	0x08003304
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x34>
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d121      	bne.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d11e      	bne.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c84:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	e005      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cac:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10d      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d102      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	e004      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d134      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d003      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0xac>
 8001cf4:	e005      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf8:	617b      	str	r3, [r7, #20]
      break;
 8001cfa:	e005      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cfe:	617b      	str	r3, [r7, #20]
      break;
 8001d00:	e002      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	617b      	str	r3, [r7, #20]
      break;
 8001d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	3301      	adds	r3, #1
 8001d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	fb03 f202 	mul.w	r2, r3, r2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	0e5b      	lsrs	r3, r3, #25
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d48:	69bb      	ldr	r3, [r7, #24]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	0800331c 	.word	0x0800331c
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d84:	f7ff fff0 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4904      	ldr	r1, [pc, #16]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08003314 	.word	0x08003314

08001dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001db0:	f7ff ffda 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0adb      	lsrs	r3, r3, #11
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08003314 	.word	0x08003314

08001dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001df0:	f7ff f9b6 	bl	8001160 <HAL_PWREx_GetVoltageRange>
 8001df4:	6178      	str	r0, [r7, #20]
 8001df6:	e014      	b.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	4a24      	ldr	r2, [pc, #144]	; (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6593      	str	r3, [r2, #88]	; 0x58
 8001e04:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e10:	f7ff f9a6 	bl	8001160 <HAL_PWREx_GetVoltageRange>
 8001e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e28:	d10b      	bne.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b80      	cmp	r3, #128	; 0x80
 8001e2e:	d919      	bls.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2ba0      	cmp	r3, #160	; 0xa0
 8001e34:	d902      	bls.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e36:	2302      	movs	r3, #2
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	e013      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	e010      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d902      	bls.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e48:	2303      	movs	r3, #3
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	e00a      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b80      	cmp	r3, #128	; 0x80
 8001e52:	d102      	bne.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e54:	2302      	movs	r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	e004      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b70      	cmp	r3, #112	; 0x70
 8001e5e:	d101      	bne.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e60:	2301      	movs	r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 0207 	bic.w	r2, r3, #7
 8001e6c:	4909      	ldr	r1, [pc, #36]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40022000 	.word	0x40022000

08001e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d031      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ebc:	d01a      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001ebe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ec2:	d814      	bhi.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ecc:	d10f      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001ece:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4a5c      	ldr	r2, [pc, #368]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eda:	e00c      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f9de 	bl	80022a4 <RCCEx_PLLSAI1_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eec:	e003      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10b      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001efc:	4b51      	ldr	r3, [pc, #324]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	494e      	ldr	r1, [pc, #312]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f12:	e001      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 809e 	beq.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f2a:	4b46      	ldr	r3, [pc, #280]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	4a3f      	ldr	r2, [pc, #252]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4c:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f5c:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a39      	ldr	r2, [pc, #228]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fe0c 	bl	8000b84 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f6e:	e009      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7fe fe08 	bl	8000b84 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d902      	bls.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	74fb      	strb	r3, [r7, #19]
        break;
 8001f82:	e005      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ef      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d15a      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01e      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fde:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d016      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fdc8 	bl	8000b84 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff6:	e00b      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fdc4 	bl	8000b84 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d902      	bls.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	74fb      	strb	r3, [r7, #19]
            break;
 800200e:	e006      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0ec      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800201e:	7cfb      	ldrb	r3, [r7, #19]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10b      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002032:	4904      	ldr	r1, [pc, #16]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800203a:	e009      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	74bb      	strb	r3, [r7, #18]
 8002040:	e006      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002050:	7c7b      	ldrb	r3, [r7, #17]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b8a      	ldr	r3, [pc, #552]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a89      	ldr	r2, [pc, #548]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206e:	4b84      	ldr	r3, [pc, #528]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002074:	f023 0203 	bic.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4980      	ldr	r1, [pc, #512]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002090:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 020c 	bic.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	4978      	ldr	r1, [pc, #480]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020b2:	4b73      	ldr	r3, [pc, #460]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	496f      	ldr	r1, [pc, #444]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e2:	4967      	ldr	r1, [pc, #412]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	495e      	ldr	r1, [pc, #376]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	4956      	ldr	r1, [pc, #344]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	494d      	ldr	r1, [pc, #308]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d028      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800215c:	4b48      	ldr	r3, [pc, #288]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4945      	ldr	r1, [pc, #276]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800217a:	d106      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800217c:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a3f      	ldr	r2, [pc, #252]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002186:	60d3      	str	r3, [r2, #12]
 8002188:	e011      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002192:	d10c      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	2101      	movs	r1, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f882 	bl	80022a4 <RCCEx_PLLSAI1_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d028      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	492d      	ldr	r1, [pc, #180]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d8:	d106      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e4:	60d3      	str	r3, [r2, #12]
 80021e6:	e011      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021f0:	d10c      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2101      	movs	r1, #1
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 f853 	bl	80022a4 <RCCEx_PLLSAI1_Config>
 80021fe:	4603      	mov	r3, r0
 8002200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01c      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002226:	4916      	ldr	r1, [pc, #88]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002236:	d10c      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	2102      	movs	r1, #2
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f830 	bl	80022a4 <RCCEx_PLLSAI1_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002264:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226c:	4904      	ldr	r1, [pc, #16]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002274:	7cbb      	ldrb	r3, [r7, #18]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000

080022a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022b2:	4b74      	ldr	r3, [pc, #464]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d018      	beq.n	80022f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022be:	4b71      	ldr	r3, [pc, #452]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0203 	and.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d10d      	bne.n	80022ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
       ||
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022d6:	4b6b      	ldr	r3, [pc, #428]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
       ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d047      	beq.n	800237a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	e044      	b.n	800237a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d018      	beq.n	800232a <RCCEx_PLLSAI1_Config+0x86>
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d825      	bhi.n	8002348 <RCCEx_PLLSAI1_Config+0xa4>
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d002      	beq.n	8002306 <RCCEx_PLLSAI1_Config+0x62>
 8002300:	2b02      	cmp	r3, #2
 8002302:	d009      	beq.n	8002318 <RCCEx_PLLSAI1_Config+0x74>
 8002304:	e020      	b.n	8002348 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11d      	bne.n	800234e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002316:	e01a      	b.n	800234e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002318:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d116      	bne.n	8002352 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002328:	e013      	b.n	8002352 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800232a:	4b56      	ldr	r3, [pc, #344]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002336:	4b53      	ldr	r3, [pc, #332]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002346:	e006      	b.n	8002356 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      break;
 800234c:	e004      	b.n	8002358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800234e:	bf00      	nop
 8002350:	e002      	b.n	8002358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002352:	bf00      	nop
 8002354:	e000      	b.n	8002358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002356:	bf00      	nop
    }

    if(status == HAL_OK)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800235e:	4b49      	ldr	r3, [pc, #292]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6819      	ldr	r1, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	430b      	orrs	r3, r1
 8002374:	4943      	ldr	r1, [pc, #268]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002376:	4313      	orrs	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d17c      	bne.n	800247a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002380:	4b40      	ldr	r3, [pc, #256]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3f      	ldr	r2, [pc, #252]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800238a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238c:	f7fe fbfa 	bl	8000b84 <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002392:	e009      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002394:	f7fe fbf6 	bl	8000b84 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d902      	bls.n	80023a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	73fb      	strb	r3, [r7, #15]
        break;
 80023a6:	e005      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ef      	bne.n	8002394 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d15f      	bne.n	800247a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d110      	bne.n	80023e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80023c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6892      	ldr	r2, [r2, #8]
 80023d0:	0211      	lsls	r1, r2, #8
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68d2      	ldr	r2, [r2, #12]
 80023d6:	06d2      	lsls	r2, r2, #27
 80023d8:	430a      	orrs	r2, r1
 80023da:	492a      	ldr	r1, [pc, #168]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	610b      	str	r3, [r1, #16]
 80023e0:	e027      	b.n	8002432 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d112      	bne.n	800240e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023e8:	4b26      	ldr	r3, [pc, #152]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6892      	ldr	r2, [r2, #8]
 80023f8:	0211      	lsls	r1, r2, #8
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6912      	ldr	r2, [r2, #16]
 80023fe:	0852      	lsrs	r2, r2, #1
 8002400:	3a01      	subs	r2, #1
 8002402:	0552      	lsls	r2, r2, #21
 8002404:	430a      	orrs	r2, r1
 8002406:	491f      	ldr	r1, [pc, #124]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002408:	4313      	orrs	r3, r2
 800240a:	610b      	str	r3, [r1, #16]
 800240c:	e011      	b.n	8002432 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002416:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6892      	ldr	r2, [r2, #8]
 800241e:	0211      	lsls	r1, r2, #8
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6952      	ldr	r2, [r2, #20]
 8002424:	0852      	lsrs	r2, r2, #1
 8002426:	3a01      	subs	r2, #1
 8002428:	0652      	lsls	r2, r2, #25
 800242a:	430a      	orrs	r2, r1
 800242c:	4915      	ldr	r1, [pc, #84]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a13      	ldr	r2, [pc, #76]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800243c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe fba1 	bl	8000b84 <HAL_GetTick>
 8002442:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002444:	e009      	b.n	800245a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002446:	f7fe fb9d 	bl	8000b84 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d902      	bls.n	800245a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	73fb      	strb	r3, [r7, #15]
          break;
 8002458:	e005      	b.n	8002466 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ef      	beq.n	8002446 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4903      	ldr	r1, [pc, #12]	; (8002484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002476:	4313      	orrs	r3, r2
 8002478:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e049      	b.n	800252e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fa00 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f000 f9d2 	bl	8002870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d001      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e03b      	b.n	80025c8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <HAL_TIM_Base_Start_IT+0x9c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0x4e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257a:	d004      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0x4e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d115      	bne.n	80025b2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_TIM_Base_Start_IT+0xa4>)
 800258e:	4013      	ands	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b06      	cmp	r3, #6
 8002596:	d015      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x8c>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259e:	d011      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b0:	e008      	b.n	80025c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e000      	b.n	80025c6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40014000 	.word	0x40014000
 80025dc:	00010007 	.word	0x00010007

080025e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0202 	mvn.w	r2, #2
 800260c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f905 	bl	8002832 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8f7 	bl	800281e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f908 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b04      	cmp	r3, #4
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0204 	mvn.w	r2, #4
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8db 	bl	8002832 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8cd 	bl	800281e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8de 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0208 	mvn.w	r2, #8
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2204      	movs	r2, #4
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8b1 	bl	8002832 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8a3 	bl	800281e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8b4 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0210 	mvn.w	r2, #16
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2208      	movs	r2, #8
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f887 	bl	8002832 <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f879 	bl	800281e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f88a 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0201 	mvn.w	r2, #1
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fd fefa 	bl	8000558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f944 	bl	8002a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279e:	d10e      	bne.n	80027be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d107      	bne.n	80027be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f937 	bl	8002a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d10e      	bne.n	80027ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d107      	bne.n	80027ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f838 	bl	800285a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d10e      	bne.n	8002816 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d107      	bne.n	8002816 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0220 	mvn.w	r2, #32
 800280e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8f7 	bl	8002a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a2a      	ldr	r2, [pc, #168]	; (800292c <TIM_Base_SetConfig+0xbc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_Base_SetConfig+0x20>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d108      	bne.n	80028a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a21      	ldr	r2, [pc, #132]	; (800292c <TIM_Base_SetConfig+0xbc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00b      	beq.n	80028c2 <TIM_Base_SetConfig+0x52>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b0:	d007      	beq.n	80028c2 <TIM_Base_SetConfig+0x52>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <TIM_Base_SetConfig+0xc0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d003      	beq.n	80028c2 <TIM_Base_SetConfig+0x52>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <TIM_Base_SetConfig+0xc4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d108      	bne.n	80028d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <TIM_Base_SetConfig+0xbc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <TIM_Base_SetConfig+0xa0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <TIM_Base_SetConfig+0xc0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d003      	beq.n	8002910 <TIM_Base_SetConfig+0xa0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <TIM_Base_SetConfig+0xc4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d103      	bne.n	8002918 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	615a      	str	r2, [r3, #20]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40014000 	.word	0x40014000
 8002934:	40014400 	.word	0x40014400

08002938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800294c:	2302      	movs	r3, #2
 800294e:	e04f      	b.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a21      	ldr	r2, [pc, #132]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002980:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d009      	beq.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b8:	d004      	beq.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10c      	bne.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40014000 	.word	0x40014000

08002a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e040      	b.n	8002ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd ff4c 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f82c 	bl	8002adc <UART_SetConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e022      	b.n	8002ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa4c 	bl	8002f34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fad3 	bl	8003078 <UART_CheckIdleState>
 8002ad2:	4603      	mov	r3, r0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae0:	b08a      	sub	sp, #40	; 0x28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4bb4      	ldr	r3, [pc, #720]	; (8002ddc <UART_SetConfig+0x300>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4aa9      	ldr	r2, [pc, #676]	; (8002de0 <UART_SetConfig+0x304>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b44:	4313      	orrs	r3, r2
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4aa0      	ldr	r2, [pc, #640]	; (8002de4 <UART_SetConfig+0x308>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d126      	bne.n	8002bb4 <UART_SetConfig+0xd8>
 8002b66:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <UART_SetConfig+0x30c>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d81b      	bhi.n	8002bac <UART_SetConfig+0xd0>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <UART_SetConfig+0xa0>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b9d 	.word	0x08002b9d
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002ba5 	.word	0x08002ba5
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b92:	e080      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002b94:	2302      	movs	r3, #2
 8002b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b9a:	e07c      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ba2:	e078      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002baa:	e074      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002bac:	2310      	movs	r3, #16
 8002bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bb2:	e070      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a8c      	ldr	r2, [pc, #560]	; (8002dec <UART_SetConfig+0x310>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d138      	bne.n	8002c30 <UART_SetConfig+0x154>
 8002bbe:	4b8a      	ldr	r3, [pc, #552]	; (8002de8 <UART_SetConfig+0x30c>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d82d      	bhi.n	8002c28 <UART_SetConfig+0x14c>
 8002bcc:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <UART_SetConfig+0xf8>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002c09 	.word	0x08002c09
 8002bd8:	08002c29 	.word	0x08002c29
 8002bdc:	08002c29 	.word	0x08002c29
 8002be0:	08002c29 	.word	0x08002c29
 8002be4:	08002c19 	.word	0x08002c19
 8002be8:	08002c29 	.word	0x08002c29
 8002bec:	08002c29 	.word	0x08002c29
 8002bf0:	08002c29 	.word	0x08002c29
 8002bf4:	08002c11 	.word	0x08002c11
 8002bf8:	08002c29 	.word	0x08002c29
 8002bfc:	08002c29 	.word	0x08002c29
 8002c00:	08002c29 	.word	0x08002c29
 8002c04:	08002c21 	.word	0x08002c21
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c0e:	e042      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c10:	2302      	movs	r3, #2
 8002c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c16:	e03e      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c1e:	e03a      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c20:	2308      	movs	r3, #8
 8002c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c26:	e036      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c28:	2310      	movs	r3, #16
 8002c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c2e:	e032      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <UART_SetConfig+0x304>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d12a      	bne.n	8002c90 <UART_SetConfig+0x1b4>
 8002c3a:	4b6b      	ldr	r3, [pc, #428]	; (8002de8 <UART_SetConfig+0x30c>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c48:	d01a      	beq.n	8002c80 <UART_SetConfig+0x1a4>
 8002c4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c4e:	d81b      	bhi.n	8002c88 <UART_SetConfig+0x1ac>
 8002c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c54:	d00c      	beq.n	8002c70 <UART_SetConfig+0x194>
 8002c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5a:	d815      	bhi.n	8002c88 <UART_SetConfig+0x1ac>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <UART_SetConfig+0x18c>
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c64:	d008      	beq.n	8002c78 <UART_SetConfig+0x19c>
 8002c66:	e00f      	b.n	8002c88 <UART_SetConfig+0x1ac>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6e:	e012      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c70:	2302      	movs	r3, #2
 8002c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c76:	e00e      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7e:	e00a      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c80:	2308      	movs	r3, #8
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c86:	e006      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8e:	e002      	b.n	8002c96 <UART_SetConfig+0x1ba>
 8002c90:	2310      	movs	r3, #16
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a51      	ldr	r2, [pc, #324]	; (8002de0 <UART_SetConfig+0x304>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d17a      	bne.n	8002d96 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d824      	bhi.n	8002cf2 <UART_SetConfig+0x216>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <UART_SetConfig+0x1d4>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cd5 	.word	0x08002cd5
 8002cb4:	08002cf3 	.word	0x08002cf3
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	08002cf3 	.word	0x08002cf3
 8002cc0:	08002ce3 	.word	0x08002ce3
 8002cc4:	08002cf3 	.word	0x08002cf3
 8002cc8:	08002cf3 	.word	0x08002cf3
 8002ccc:	08002cf3 	.word	0x08002cf3
 8002cd0:	08002ceb 	.word	0x08002ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f7ff f854 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	61f8      	str	r0, [r7, #28]
        break;
 8002cda:	e010      	b.n	8002cfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cdc:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <UART_SetConfig+0x314>)
 8002cde:	61fb      	str	r3, [r7, #28]
        break;
 8002ce0:	e00d      	b.n	8002cfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce2:	f7fe ffb5 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8002ce6:	61f8      	str	r0, [r7, #28]
        break;
 8002ce8:	e009      	b.n	8002cfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cee:	61fb      	str	r3, [r7, #28]
        break;
 8002cf0:	e005      	b.n	8002cfe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8107 	beq.w	8002f14 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d305      	bcc.n	8002d22 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d903      	bls.n	8002d2a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d28:	e0f4      	b.n	8002f14 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	461c      	mov	r4, r3
 8002d30:	4615      	mov	r5, r2
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	022b      	lsls	r3, r5, #8
 8002d3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d40:	0222      	lsls	r2, r4, #8
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	6849      	ldr	r1, [r1, #4]
 8002d46:	0849      	lsrs	r1, r1, #1
 8002d48:	2000      	movs	r0, #0
 8002d4a:	4688      	mov	r8, r1
 8002d4c:	4681      	mov	r9, r0
 8002d4e:	eb12 0a08 	adds.w	sl, r2, r8
 8002d52:	eb43 0b09 	adc.w	fp, r3, r9
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d64:	4650      	mov	r0, sl
 8002d66:	4659      	mov	r1, fp
 8002d68:	f7fd fa30 	bl	80001cc <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d7a:	d308      	bcc.n	8002d8e <UART_SetConfig+0x2b2>
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d82:	d204      	bcs.n	8002d8e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	e0c2      	b.n	8002f14 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d94:	e0be      	b.n	8002f14 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9e:	d16a      	bne.n	8002e76 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d834      	bhi.n	8002e12 <UART_SetConfig+0x336>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <UART_SetConfig+0x2d4>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dd5 	.word	0x08002dd5
 8002db4:	08002df5 	.word	0x08002df5
 8002db8:	08002dfd 	.word	0x08002dfd
 8002dbc:	08002e13 	.word	0x08002e13
 8002dc0:	08002e03 	.word	0x08002e03
 8002dc4:	08002e13 	.word	0x08002e13
 8002dc8:	08002e13 	.word	0x08002e13
 8002dcc:	08002e13 	.word	0x08002e13
 8002dd0:	08002e0b 	.word	0x08002e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f7fe ffd4 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8002dd8:	61f8      	str	r0, [r7, #28]
        break;
 8002dda:	e020      	b.n	8002e1e <UART_SetConfig+0x342>
 8002ddc:	efff69f3 	.word	0xefff69f3
 8002de0:	40008000 	.word	0x40008000
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40004400 	.word	0x40004400
 8002df0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7fe ffda 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8002df8:	61f8      	str	r0, [r7, #28]
        break;
 8002dfa:	e010      	b.n	8002e1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dfc:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <UART_SetConfig+0x454>)
 8002dfe:	61fb      	str	r3, [r7, #28]
        break;
 8002e00:	e00d      	b.n	8002e1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e02:	f7fe ff25 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8002e06:	61f8      	str	r0, [r7, #28]
        break;
 8002e08:	e009      	b.n	8002e1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e0e:	61fb      	str	r3, [r7, #28]
        break;
 8002e10:	e005      	b.n	8002e1e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d077      	beq.n	8002f14 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005a      	lsls	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b0f      	cmp	r3, #15
 8002e3e:	d916      	bls.n	8002e6e <UART_SetConfig+0x392>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e46:	d212      	bcs.n	8002e6e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f023 030f 	bic.w	r3, r3, #15
 8002e50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	8afb      	ldrh	r3, [r7, #22]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	8afa      	ldrh	r2, [r7, #22]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e052      	b.n	8002f14 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e74:	e04e      	b.n	8002f14 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d827      	bhi.n	8002ece <UART_SetConfig+0x3f2>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <UART_SetConfig+0x3a8>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002eb1 	.word	0x08002eb1
 8002e8c:	08002eb9 	.word	0x08002eb9
 8002e90:	08002ecf 	.word	0x08002ecf
 8002e94:	08002ebf 	.word	0x08002ebf
 8002e98:	08002ecf 	.word	0x08002ecf
 8002e9c:	08002ecf 	.word	0x08002ecf
 8002ea0:	08002ecf 	.word	0x08002ecf
 8002ea4:	08002ec7 	.word	0x08002ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f7fe ff6a 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8002eac:	61f8      	str	r0, [r7, #28]
        break;
 8002eae:	e014      	b.n	8002eda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eb0:	f7fe ff7c 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8002eb4:	61f8      	str	r0, [r7, #28]
        break;
 8002eb6:	e010      	b.n	8002eda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <UART_SetConfig+0x454>)
 8002eba:	61fb      	str	r3, [r7, #28]
        break;
 8002ebc:	e00d      	b.n	8002eda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ebe:	f7fe fec7 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8002ec2:	61f8      	str	r0, [r7, #28]
        break;
 8002ec4:	e009      	b.n	8002eda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eca:	61fb      	str	r3, [r7, #28]
        break;
 8002ecc:	e005      	b.n	8002eda <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ed8:	bf00      	nop
    }

    if (pclk != 0U)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d019      	beq.n	8002f14 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	085a      	lsrs	r2, r3, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	441a      	add	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	d909      	bls.n	8002f0e <UART_SetConfig+0x432>
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d205      	bcs.n	8002f0e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	e002      	b.n	8002f14 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f2e:	bf00      	nop
 8002f30:	00f42400 	.word	0x00f42400

08002f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01a      	beq.n	800304a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003032:	d10a      	bne.n	800304a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	605a      	str	r2, [r3, #4]
  }
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af02      	add	r7, sp, #8
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003088:	f7fd fd7c 	bl	8000b84 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b08      	cmp	r3, #8
 800309a:	d10e      	bne.n	80030ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800309c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f82d 	bl	800310a <UART_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e023      	b.n	8003102 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d10e      	bne.n	80030e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f817 	bl	800310a <UART_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e00d      	b.n	8003102 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b09c      	sub	sp, #112	; 0x70
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311a:	e0a5      	b.n	8003268 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	f000 80a1 	beq.w	8003268 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7fd fd2d 	bl	8000b84 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <UART_WaitOnFlagUntilTimeout+0x32>
 8003136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13e      	bne.n	80031ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800314a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003150:	667b      	str	r3, [r7, #100]	; 0x64
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800315a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800315c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e6      	bne.n	800313c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3308      	adds	r3, #8
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	663b      	str	r3, [r7, #96]	; 0x60
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3308      	adds	r3, #8
 800318c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800318e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e5      	bne.n	800316e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e067      	b.n	800328a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d04f      	beq.n	8003268 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d6:	d147      	bne.n	8003268 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e6      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3308      	adds	r3, #8
 800321a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	613b      	str	r3, [r7, #16]
   return(result);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	66bb      	str	r3, [r7, #104]	; 0x68
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003234:	623a      	str	r2, [r7, #32]
 8003236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	69f9      	ldr	r1, [r7, #28]
 800323a:	6a3a      	ldr	r2, [r7, #32]
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	61bb      	str	r3, [r7, #24]
   return(result);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e5      	bne.n	8003214 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e010      	b.n	800328a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4013      	ands	r3, r2
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	429a      	cmp	r2, r3
 8003284:	f43f af4a 	beq.w	800311c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3770      	adds	r7, #112	; 0x70
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	4d0d      	ldr	r5, [pc, #52]	; (80032cc <__libc_init_array+0x38>)
 8003298:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329a:	1b64      	subs	r4, r4, r5
 800329c:	10a4      	asrs	r4, r4, #2
 800329e:	2600      	movs	r6, #0
 80032a0:	42a6      	cmp	r6, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	4d0b      	ldr	r5, [pc, #44]	; (80032d4 <__libc_init_array+0x40>)
 80032a6:	4c0c      	ldr	r4, [pc, #48]	; (80032d8 <__libc_init_array+0x44>)
 80032a8:	f000 f820 	bl	80032ec <_init>
 80032ac:	1b64      	subs	r4, r4, r5
 80032ae:	10a4      	asrs	r4, r4, #2
 80032b0:	2600      	movs	r6, #0
 80032b2:	42a6      	cmp	r6, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032bc:	4798      	blx	r3
 80032be:	3601      	adds	r6, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c6:	4798      	blx	r3
 80032c8:	3601      	adds	r6, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	08003354 	.word	0x08003354
 80032d0:	08003354 	.word	0x08003354
 80032d4:	08003354 	.word	0x08003354
 80032d8:	08003358 	.word	0x08003358

080032dc <memset>:
 80032dc:	4402      	add	r2, r0
 80032de:	4603      	mov	r3, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d100      	bne.n	80032e6 <memset+0xa>
 80032e4:	4770      	bx	lr
 80032e6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ea:	e7f9      	b.n	80032e0 <memset+0x4>

080032ec <_init>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr

080032f8 <_fini>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	bf00      	nop
 80032fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fe:	bc08      	pop	{r3}
 8003300:	469e      	mov	lr, r3
 8003302:	4770      	bx	lr
